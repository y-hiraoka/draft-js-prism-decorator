{"version":3,"sources":["components/Toolbar.tsx","decorators/link.tsx","decorators/prism.ts","components/Editor.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Toolbar","editorState","setEditorState","onMouseDown","e","preventDefault","selection","getSelection","contentBlock","getCurrentContent","getBlockForKey","getStartKey","currentInlineStyle","getCurrentInlineStyle","className","BLOCK_TYPES","map","block","onClick","blockType","prevState","RichUtils","toggleBlockType","data-is-active","getType","displayName","INLINE_STYLE_TYPES","style","styleType","toggleInlineStyle","has","urlRegex","linkDecorator","strategy","callback","regex","matchArr","start","text","getText","exec","index","length","findWithRegex","component","children","decoratedText","cursor","window","open","href","prismDecorator","createPrismDecorator","getLanguage","Editor","handleKeyCommand","useCallback","command","newState","handleReturn","event","KeyBindingUtil","isSoftNewlineEvent","insertSoftNewline","blockStyleFn","keyBindingFn","code","onTab","getDefaultKeyBinding","Draft","onChange","customStyleMap","CODE","fontSize","fontFamily","overflowWrap","backgroundColor","padding","borderRadius","textShadow","decorators","CompositeDecorator","InitialContentState","convertFromRaw","DocRawState","App","useState","EditorState","createWithContent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7994d53d.chunk.js","sourcesContent":["import { EditorState, RichUtils } from \"draft-js\";\nimport \"./Toolbar.css\";\n\ntype Props = {\n  editorState: EditorState;\n  setEditorState: React.Dispatch<React.SetStateAction<EditorState>>;\n};\n\nexport const Toolbar: React.VFC<Props> = ({ editorState, setEditorState }) => {\n  const onMouseDown = (e: React.MouseEvent) => e.preventDefault();\n\n  const toggleBlockType = (blockType: string) => {\n    setEditorState(prevState => RichUtils.toggleBlockType(prevState, blockType));\n  };\n\n  const toggleInlineStyle = (styleType: string) => {\n    setEditorState(prevState => RichUtils.toggleInlineStyle(prevState, styleType));\n  };\n\n  const selection = editorState.getSelection();\n  const contentState = editorState.getCurrentContent();\n  const contentBlock = contentState.getBlockForKey(selection.getStartKey());\n  const currentInlineStyle = editorState.getCurrentInlineStyle();\n\n  return (\n    <div className=\"Toolbar\">\n      <div className=\"Toolbar__row\">\n        <div className=\"Toolbar__row-inner\">\n          {BLOCK_TYPES.map(block => (\n            <button\n              key={block.blockType}\n              className=\"Toolbar__button\"\n              onMouseDown={onMouseDown}\n              onClick={() => toggleBlockType(block.blockType)}\n              data-is-active={block.blockType === contentBlock.getType()}>\n              {block.displayName}\n            </button>\n          ))}\n        </div>\n      </div>\n      <div className=\"Toolbar__row\">\n        <div className=\"Toolbar__row-inner\">\n          {INLINE_STYLE_TYPES.map(style => (\n            <button\n              key={style.styleType}\n              className=\"Toolbar__button\"\n              onMouseDown={onMouseDown}\n              onClick={() => toggleInlineStyle(style.styleType)}\n              data-is-active={currentInlineStyle.has(style.styleType)}>\n              {style.displayName}\n            </button>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst BLOCK_TYPES = [\n  {\n    displayName: \"JS / TS Code\",\n    blockType: \"code-block\",\n  },\n  {\n    displayName: \"H1\",\n    blockType: \"header-one\",\n  },\n  {\n    displayName: \"H2\",\n    blockType: \"header-two\",\n  },\n  {\n    displayName: \"H3\",\n    blockType: \"header-three\",\n  },\n  {\n    displayName: \"H4\",\n    blockType: \"header-four\",\n  },\n  {\n    displayName: \"H5\",\n    blockType: \"header-five\",\n  },\n  {\n    displayName: \"H6\",\n    blockType: \"header-six\",\n  },\n  {\n    displayName: \"UL\",\n    blockType: \"unordered-list-item\",\n  },\n  {\n    displayName: \"OL\",\n    blockType: \"ordered-list-item\",\n  },\n  {\n    displayName: \"Quote\",\n    blockType: \"blockquote\",\n  },\n];\n\nconst INLINE_STYLE_TYPES = [\n  {\n    displayName: \"bold\",\n    styleType: \"BOLD\",\n  },\n  {\n    displayName: \"italic\",\n    styleType: \"ITALIC\",\n  },\n  {\n    displayName: \"underline\",\n    styleType: \"UNDERLINE\",\n  },\n  {\n    displayName: \"strikethrough\",\n    styleType: \"STRIKETHROUGH\",\n  },\n  {\n    displayName: \"code\",\n    styleType: \"CODE\",\n  },\n];\n","import { ContentBlock, DraftDecorator } from \"draft-js\";\n\nfunction findWithRegex(\n  regex: RegExp,\n  contentBlock: ContentBlock,\n  callback: (start: number, end: number) => void,\n) {\n  const text = contentBlock.getText();\n  let matchArr, start;\n  while ((matchArr = regex.exec(text)) !== null) {\n    start = matchArr.index;\n    callback(start, start + matchArr[0].length);\n  }\n}\n\nconst urlRegex =\n  /https?:\\/\\/[-_.!~*'()a-zA-Z0-9;/?:@&=+$,%#\\u3000-\\u30FE\\u4E00-\\u9FA0\\uFF01-\\uFFE3]+/g;\n\ntype Props = { decoratedText: string };\nconst LinkDecoratorComponent: React.FC<Props> = ({ children, decoratedText }) => {\n  const onClick = (e: React.MouseEvent) => {\n    e.preventDefault();\n    window.open(decoratedText, \"_blank\");\n  };\n  return (\n    <a style={{ cursor: \"pointer\" }} onClick={onClick} href={decoratedText}>\n      {children}\n    </a>\n  );\n};\n\nexport const linkDecorator: DraftDecorator = {\n  strategy: (block, callback) => findWithRegex(urlRegex, block, callback),\n  component: LinkDecoratorComponent,\n};\n","import { ContentBlock } from \"draft-js\";\nimport createPrismDecorator from \"draft-js-prism-decorator\";\n\nimport \"prismjs/themes/prism.css\";\nimport \"prismjs/components/prism-typescript\";\n\nconst getLanguage = (block: ContentBlock) => \"typescript\";\n\nexport const prismDecorator = createPrismDecorator({ getLanguage });\n","import \"draft-js/dist/Draft.css\";\nimport \"./Editor.css\";\n\nimport { useCallback } from \"react\";\nimport {\n  ContentBlock,\n  DraftHandleValue,\n  DraftStyleMap,\n  Editor as DraftEditor,\n  EditorState,\n  getDefaultKeyBinding,\n  KeyBindingUtil,\n  RichUtils,\n} from \"draft-js\";\n\ntype Props = {\n  editorState: EditorState;\n  setEditorState: React.Dispatch<React.SetStateAction<EditorState>>;\n};\nexport const Editor: React.VFC<Props> = ({ editorState, setEditorState }) => {\n  const handleKeyCommand = useCallback(\n    (command: string, editorState: EditorState): DraftHandleValue => {\n      const newState = RichUtils.handleKeyCommand(editorState, command);\n\n      if (newState !== null) {\n        setEditorState(newState);\n        return \"handled\";\n      }\n\n      return \"not-handled\";\n    },\n    [setEditorState],\n  );\n\n  const handleReturn = useCallback(\n    (event: React.KeyboardEvent<{}>, editorState: EditorState): DraftHandleValue => {\n      if (KeyBindingUtil.isSoftNewlineEvent(event)) {\n        setEditorState(RichUtils.insertSoftNewline(editorState));\n        return \"handled\";\n      }\n\n      return \"not-handled\";\n    },\n    [setEditorState],\n  );\n\n  const blockStyleFn = useCallback((block: ContentBlock) => {\n    const blockType = block.getType();\n\n    if (blockType === \"unstyled\") {\n      return \"Editor__unstyled\";\n    }\n\n    if (blockType === \"unordered-list-item\" || blockType === \"ordered-list-item\") {\n      return \"Editor__list-item\";\n    }\n\n    if (blockType === \"blockquote\") {\n      return \"Editor__blockquote\";\n    }\n\n    if (blockType === \"code-block\") {\n      return \"language-typescript\";\n    }\n\n    return \"\";\n  }, []);\n\n  const keyBindingFn = useCallback(\n    (e: React.KeyboardEvent<{}>) => {\n      if (e.code === \"Tab\") {\n        setEditorState(RichUtils.onTab(e, editorState, 5));\n      }\n\n      return getDefaultKeyBinding(e);\n    },\n    [editorState, setEditorState],\n  );\n\n  const customStyleMap: DraftStyleMap = {\n    CODE: {\n      fontSize: \"0.9em\",\n      fontFamily: \"Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace\",\n      overflowWrap: \"break-word\",\n      backgroundColor: \"#f5f2f0\",\n      padding: \"2px 6px\",\n      borderRadius: \"2px\",\n      textShadow: \"0 1px white\",\n    },\n  };\n\n  return (\n    <DraftEditor\n      editorState={editorState}\n      onChange={setEditorState}\n      handleKeyCommand={handleKeyCommand}\n      handleReturn={handleReturn}\n      blockStyleFn={blockStyleFn}\n      keyBindingFn={keyBindingFn}\n      customStyleMap={customStyleMap}\n    />\n  );\n};\n","import \"./App.css\";\n\nimport { useState } from \"react\";\nimport {\n  CompositeDecorator,\n  convertFromRaw,\n  EditorState,\n  RawDraftContentState,\n} from \"draft-js\";\nimport { Toolbar } from \"./components/Toolbar\";\nimport { linkDecorator } from \"./decorators/link\";\nimport { prismDecorator } from \"./decorators/prism\";\nimport DocRawState from \"./DocsRawState.json\";\nimport { Editor } from \"./components/Editor\";\n\nconst decorators = new CompositeDecorator([prismDecorator, linkDecorator]);\nconst InitialContentState = convertFromRaw(DocRawState as RawDraftContentState);\n\nfunction App() {\n  const [editorState, setEditorState] = useState(() =>\n    EditorState.createWithContent(InitialContentState, decorators),\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__Toolbar\">\n        <Toolbar editorState={editorState} setEditorState={setEditorState} />\n      </div>\n      <div className=\"App__Editor\">\n        <Editor editorState={editorState} setEditorState={setEditorState} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}